Your task is to build an agent to solve a modifed version of the 8 puzzle problem (called the Expense 8 puzzle problem). The task is still to take a 3X3 grid on which 8 tiles have been placed, where you can only move one tile at a time to an adjacent location (as long as it is blank) and figure out the order in which to move the tiles to get it to a desired configuration. However now the number on the tile now also represents the cot of moving that tile (moving the tile marked 6 costs 6). Write a python code in one file to solve this problem using bfs using non recursive.

The output should appear as follows:

Nodes Popped: 97
Nodes Expanded: 64
Nodes Generated: 173
Max Fringe Size: 77
Solution Found at depth 12 with cost of 63.
Steps:
        Move 7 Left
        Move 5 Up
        Move 8 Right
        Move 7 Down
        Move 5 Left
        Move 6 Down
        Move 3 Right
        Move 2 Right
        Move 1 Up
        Move 4 Up
        Move 7 Left
        Move 8 Left
		
Implement a trace log like below:-

Command-Line Arguments : ['start.txt', 'goal.txt', 'a*', 'true']
Method Selected: a*
Running a*

Generating successors to < state = [[2, 3, 6], [1, 0, 7], [4, 8, 5]], action = {Start} g(n) = 0, d = 0, f(n) = 47, Parent = Pointer to {None} >:
	4 successors generated
	Closed: [[[2, 3, 6], [1, 0, 7], [4, 8, 5]]]
	Fringe: [
		< state = [[2, 3, 6], [1, 7, 0], [4, 8, 5]], action = {Move 7 Left} g(n) = 7, d = 1, f(n) = 47, Parent = Pointer to {< state = [[2, 3, 6], [1, 0, 7], [4, 8, 5]], action = {Start} g(n) = 0, d = 0, f(n) = 47, Parent = Pointer to {None} >} >
		< state = [[2, 3, 6], [0, 1, 7], [4, 8, 5]], action = {Move 1 Right} g(n) = 1, d = 1, f(n) = 49, Parent = Pointer to {< state = [[2, 3, 6], [1, 0, 7], [4, 8, 5]], action = {Start} g(n) = 0, d = 0, f(n) = 47, Parent = Pointer to {None} >} >
		< state = [[2, 0, 6], [1, 3, 7], [4, 8, 5]], action = {Move 3 Down} g(n) = 3, d = 1, f(n) = 53, Parent = Pointer to {< state = [[2, 3, 6], [1, 0, 7], [4, 8, 5]], action = {Start} g(n) = 0, d = 0, f(n) = 47, Parent = Pointer to {None} >} >
		< state = [[2, 3, 6], [1, 8, 7], [4, 0, 5]], action = {Move 8 Up} g(n) = 8, d = 1, f(n) = 63, Parent = Pointer to {< state = [[2, 3, 6], [1, 0, 7], [4, 8, 5]], action = {Start} g(n) = 0, d = 0, f(n) = 47, Parent = Pointer to {None} >} >]
		
		
Goal Found: < state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]], action = {Move 8 Left} g(n) = 63, d = 12, f(n) = 63, Parent = Pointer to {< state = [[1, 2, 3], [4, 5, 6], [7, 0, 8]], action = {Move 7 Left} g(n) = 55, d = 11, f(n) = 63, Parent = Pointer to {< state = [[1, 2, 3], [4, 5, 6], [0, 7, 8]], action = {Move 4 Up} g(n) = 48, d = 10, f(n) = 63, Parent = Pointer to {< state = [[1, 2, 3], [0, 5, 6], [4, 7, 8]], action = {Move 1 Up} g(n) = 44, d = 9, f(n) = 63, Parent = Pointer to {< state = [[0, 2, 3], [1, 5, 6], [4, 7, 8]], action = {Move 2 Right} g(n) = 43, d = 8, f(n) = 63, Parent = Pointer to {< state = [[2, 0, 3], [1, 5, 6], [4, 7, 8]], action = {Move 3 Right} g(n) = 41, d = 7, f(n) = 63, Parent = Pointer to {< state = [[2, 3, 0], [1, 5, 6], [4, 7, 8]], action = {Move 6 Down} g(n) = 38, d = 6, f(n) = 63, Parent = Pointer to {< state = [[2, 3, 6], [1, 5, 0], [4, 7, 8]], action = {Move 5 Left} g(n) = 32, d = 5, f(n) = 63, Parent = Pointer to {< state = [[2, 3, 6], [1, 0, 5], [4, 7, 8]], action = {Move 7 Down} g(n) = 27, d = 4, f(n) = 63, Parent = Pointer to {< state = [[2, 3, 6], [1, 7, 5], [4, 0, 8]], action = {Move 8 Right} g(n) = 20, d = 3, f(n) = 63, Parent = Pointer to {< state = [[2, 3, 6], [1, 7, 5], [4, 8, 0]], action = {Move 5 Up} g(n) = 12, d = 2, f(n) = 47, Parent = Pointer to {< state = [[2, 3, 6], [1, 7, 0], [4, 8, 5]], action = {Move 7 Left} g(n) = 7, d = 1, f(n) = 47, Parent = Pointer to {< state = [[2, 3, 6], [1, 0, 7], [4, 8, 5]], action = {Start} g(n) = 0, d = 0, f(n) = 47, Parent = Pointer to {None} >} >} >} >} >} >} >} >} >} >} >} >} >
	Nodes Popped: 97
	Nodes Expanded: 64
	Nodes Generated: 173
	Max Fringe Size: 77